{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SafeKeys-Core Documentation","text":"<p> \ud83d\udd10 TypeScript Library for Password Management </p> <p> </p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>\ud83d\udd10 Encryption Functions</li> </ul> <p><code>encryptVault()</code> and <code>decryptVault()</code> functions</p> <p> View Functions</p> <ul> <li>\ud83d\udce6 Entry Management</li> </ul> <p><code>createEntry()</code>, <code>updateEntry()</code>, and related functions</p> <p> View Functions</p> <ul> <li>\u2705 Validation</li> </ul> <p>Validation functions and schemas</p> <p> View Functions</p> <ul> <li>\ud83d\udd27 TypeScript Types</li> </ul> <p>Interfaces, enums, and type definitions</p> <p> View Types</p>"},{"location":"#quick-example","title":"\ud83d\ude80 Quick Example","text":"<pre><code>import { encryptVault, decryptVault, createEntry } from \"safekeys-core\";\n\n// Create a password entry\nconst entry = createEntry({\n  title: \"GitHub\",\n  username: \"myusername\",\n  password: \"secure-password-123\",\n  url: \"https://github.com\",\n});\n\n// Encrypt the data\nconst encrypted = await encryptVault(JSON.stringify(entry), \"master-password\");\n\n// Decrypt when needed\nconst decrypted = await decryptVault(encrypted, \"master-password\");\n</code></pre>"},{"location":"#links","title":"\ud83d\udd17 Links","text":"<ul> <li>GitHub Repository - Source code</li> <li>npm Package - Install via npm</li> </ul>"},{"location":"Encryption%20Functions/encryption/","title":"Encryption","text":"<p>Functions for encrypting and decrypting vault data using AES-GCM encryption.</p>"},{"location":"Encryption%20Functions/encryption/#encryptvault","title":"encryptVault()","text":"<p>Encrypts vault data using AES-GCM encryption with password-based key derivation.</p>"},{"location":"Encryption%20Functions/encryption/#signature","title":"Signature","text":"<pre><code>async function encryptVault(\n  plainText: string,\n  password: string\n): Promise&lt;string&gt;;\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#parameters","title":"Parameters","text":"Parameter Type Description <code>plainText</code> <code>string</code> The plain text data to encrypt <code>password</code> <code>string</code> The password used for encryption"},{"location":"Encryption%20Functions/encryption/#returns","title":"Returns","text":"<p><code>Promise&lt;string&gt;</code> - Encrypted data as a string</p>"},{"location":"Encryption%20Functions/encryption/#example","title":"Example","text":"<pre><code>import { encryptVault } from \"safekeys-core\";\n\nconst vaultData = JSON.stringify({\n  id: \"vault_123\",\n  name: \"My Vault\",\n  entries: [\n    {\n      id: \"entry_1\",\n      title: \"GitHub\",\n      username: \"myuser\",\n      password: \"secret123\",\n    },\n  ],\n});\n\nconst masterPassword = \"my-secure-master-password\";\n\ntry {\n  const encryptedData = await encryptVault(vaultData, masterPassword);\n  console.log(\"Vault encrypted successfully\");\n  console.log(\"Encrypted data:\", encryptedData);\n} catch (error) {\n  console.error(\"Encryption failed:\", error);\n}\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#error-handling","title":"Error Handling","text":"<pre><code>import { encryptVault } from \"safekeys-core\";\n\nasync function safeEncrypt(data: string, password: string) {\n  try {\n    const encrypted = await encryptVault(data, password);\n    return { success: true, data: encrypted };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Encryption failed\",\n    };\n  }\n}\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#decryptvault","title":"decryptVault()","text":"<p>Decrypts vault data using AES-GCM decryption with password-based key derivation.</p>"},{"location":"Encryption%20Functions/encryption/#signature_1","title":"Signature","text":"<pre><code>async function decryptVault(\n  cipherText: string,\n  password: string\n): Promise&lt;string&gt;;\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>cipherText</code> <code>string</code> The encrypted data to decrypt <code>password</code> <code>string</code> The password used for decryption"},{"location":"Encryption%20Functions/encryption/#returns_1","title":"Returns","text":"<p><code>Promise&lt;string&gt;</code> - Decrypted plain text data</p>"},{"location":"Encryption%20Functions/encryption/#example_1","title":"Example","text":"<pre><code>import { decryptVault } from \"safekeys-core\";\n\nconst encryptedData = \"...\"; // Previously encrypted data\nconst masterPassword = \"my-secure-master-password\";\n\ntry {\n  const decryptedData = await decryptVault(encryptedData, masterPassword);\n  const vault = JSON.parse(decryptedData);\n\n  console.log(\"Vault decrypted successfully\");\n  console.log(\"Vault name:\", vault.name);\n  console.log(\"Number of entries:\", vault.entries.length);\n} catch (error) {\n  console.error(\"Decryption failed:\", error);\n}\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#error-handling_1","title":"Error Handling","text":"<pre><code>import { decryptVault } from \"safekeys-core\";\n\nasync function safeDecrypt(encryptedData: string, password: string) {\n  try {\n    const decrypted = await decryptVault(encryptedData, password);\n    return { success: true, data: decrypted };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Decryption failed\",\n    };\n  }\n}\n\n// Usage\nconst result = await safeDecrypt(encryptedData, userPassword);\nif (result.success) {\n  const vault = JSON.parse(result.data);\n} else {\n  console.error(\"Failed to decrypt:\", result.error);\n}\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#security-notes","title":"Security Notes","text":""},{"location":"Encryption%20Functions/encryption/#password-requirements","title":"Password Requirements","text":"<ul> <li>Use strong master passwords (minimum 12 characters)</li> <li>Include uppercase, lowercase, numbers, and symbols</li> <li>Avoid common passwords or personal information</li> <li>Consider using a password manager for the master password</li> </ul>"},{"location":"Encryption%20Functions/encryption/#best-practices","title":"Best Practices","text":"<pre><code>import { encryptVault, decryptVault } from \"safekeys-core\";\n\n// \u2705 Good: Strong password\nconst strongPassword = \"MyVault2024!SecurePassword#123\";\n\n// \u274c Bad: Weak password\nconst weakPassword = \"password123\";\n\n// \u2705 Good: Error handling\nasync function secureVaultOperation(data: string, password: string) {\n  try {\n    const encrypted = await encryptVault(data, password);\n    // Clear sensitive data from memory\n    password = \"\";\n    return encrypted;\n  } catch (error) {\n    // Clear sensitive data even on error\n    password = \"\";\n    throw error;\n  }\n}\n\n// \u2705 Good: Validate password strength before encryption\nfunction validateMasterPassword(password: string): boolean {\n  return (\n    password.length &gt;= 12 &amp;&amp;\n    /[A-Z]/.test(password) &amp;&amp;\n    /[a-z]/.test(password) &amp;&amp;\n    /[0-9]/.test(password) &amp;&amp;\n    /[^A-Za-z0-9]/.test(password)\n  );\n}\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#memory-management","title":"Memory Management","text":"<pre><code>// Clear sensitive data after use\nlet masterPassword = \"user-entered-password\";\nlet decryptedData = \"\";\n\ntry {\n  decryptedData = await decryptVault(encryptedVault, masterPassword);\n  // Use decrypted data...\n} finally {\n  // Clear sensitive variables\n  masterPassword = \"\";\n  decryptedData = \"\";\n}\n</code></pre>"},{"location":"Encryption%20Functions/encryption/#implementation-details","title":"Implementation Details","text":"<p>SafeKeys-Core uses the <code>crypto-aes-gcm</code> library for encryption:</p> <ul> <li>Algorithm: AES-256-GCM</li> <li>Key Derivation: PBKDF2 with SHA-256</li> <li>Authentication: Built-in with GCM mode</li> <li>Salt: Randomly generated for each encryption</li> <li>IV: Randomly generated for each encryption</li> </ul> <p>The encryption process:</p> <ol> <li>Generate random salt and IV</li> <li>Derive encryption key from password using PBKDF2</li> <li>Encrypt data using AES-256-GCM</li> <li>Return encrypted data with salt and IV embedded</li> </ol> <p>The decryption process:</p> <ol> <li>Extract salt and IV from encrypted data</li> <li>Derive decryption key from password using PBKDF2</li> <li>Decrypt data using AES-256-GCM</li> <li>Verify authentication tag</li> <li>Return plain text data</li> </ol>"},{"location":"Entry%20Functions/entry-management/","title":"Entry management","text":"<p>Functions for creating, updating, and managing vault entries.</p>"},{"location":"Entry%20Functions/entry-management/#createentry","title":"createEntry()","text":"<p>Creates a new vault entry with the provided data.</p>"},{"location":"Entry%20Functions/entry-management/#signature","title":"Signature","text":"<pre><code>function createEntry(data: CreateVaultEntryData): VaultEntry;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>CreateVaultEntryData</code> Entry data without ID and timestamps"},{"location":"Entry%20Functions/entry-management/#returns","title":"Returns","text":"<p><code>VaultEntry</code> - Complete vault entry with generated ID and timestamps</p>"},{"location":"Entry%20Functions/entry-management/#example","title":"Example","text":"<pre><code>import { createEntry, EntryCategory } from \"safekeys-core\";\n\nconst entry = createEntry({\n  title: \"GitHub Account\",\n  username: \"myusername\",\n  password: \"secure-password-123\",\n  url: \"https://github.com\",\n  category: EntryCategory.LOGIN,\n  tags: [\"development\", \"work\"],\n  notes: \"My main GitHub account\",\n  favorite: true,\n});\n\nconsole.log(entry);\n// {\n//   id: \"entry_1234567890\",\n//   title: \"GitHub Account\",\n//   username: \"myusername\",\n//   password: \"secure-password-123\",\n//   url: \"https://github.com\",\n//   category: \"login\",\n//   tags: [\"development\", \"work\"],\n//   notes: \"My main GitHub account\",\n//   favorite: true,\n//   customFields: [],\n//   createdAt: Date object,\n//   updatedAt: Date object\n// }\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#updateentry","title":"updateEntry()","text":"<p>Updates an existing vault entry with new data.</p>"},{"location":"Entry%20Functions/entry-management/#signature_1","title":"Signature","text":"<pre><code>function updateEntry(\n  entry: VaultEntry,\n  updates: UpdateVaultEntryData\n): VaultEntry;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>entry</code> <code>VaultEntry</code> The existing entry to update <code>updates</code> <code>UpdateVaultEntryData</code> Partial data to update"},{"location":"Entry%20Functions/entry-management/#returns_1","title":"Returns","text":"<p><code>VaultEntry</code> - Updated entry with new <code>updatedAt</code> timestamp</p>"},{"location":"Entry%20Functions/entry-management/#example_1","title":"Example","text":"<pre><code>import { updateEntry } from \"safekeys-core\";\n\nconst existingEntry = {\n  /* ... existing entry ... */\n};\n\nconst updatedEntry = updateEntry(existingEntry, {\n  password: \"new-secure-password-456\",\n  notes: \"Updated password on 2024-01-15\",\n});\n\nconsole.log(updatedEntry.password); // \"new-secure-password-456\"\nconsole.log(updatedEntry.updatedAt); // New Date object\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#validateentry","title":"validateEntry()","text":"<p>Validates a vault entry against the schema.</p>"},{"location":"Entry%20Functions/entry-management/#signature_2","title":"Signature","text":"<pre><code>function validateEntry(entry: VaultEntry): ValidationResult;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>entry</code> <code>VaultEntry</code> The entry object to validate"},{"location":"Entry%20Functions/entry-management/#returns_2","title":"Returns","text":"<p><code>ValidationResult</code> - Validation result with errors and warnings</p>"},{"location":"Entry%20Functions/entry-management/#example_2","title":"Example","text":"<pre><code>import { validateEntry } from \"safekeys-core\";\n\nconst entryToValidate = {\n  id: \"entry_123\",\n  title: \"Test Entry\",\n  username: \"user@example.com\",\n  password: \"password123\",\n  createdAt: new Date(),\n  updatedAt: new Date(),\n};\n\nconst result = validateEntry(entryToValidate);\n\nif (result.isValid) {\n  console.log(\"Entry is valid\");\n} else {\n  console.log(\"Validation errors:\", result.errors);\n  console.log(\"Validation warnings:\", result.warnings);\n}\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#createcustomfield","title":"createCustomField()","text":"<p>Creates a custom field for vault entries.</p>"},{"location":"Entry%20Functions/entry-management/#signature_3","title":"Signature","text":"<pre><code>function createCustomField(\n  name: string,\n  value: string,\n  type: FieldType = FieldType.TEXT,\n  hidden: boolean = false\n): CustomField;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_3","title":"Parameters","text":"Parameter Type Description <code>name</code> <code>string</code> Display name of the field <code>value</code> <code>string</code> Field value <code>type</code> <code>FieldType</code> Type of the field (default: FieldType.TEXT) <code>hidden</code> <code>boolean</code> Whether the field should be hidden (default: false)"},{"location":"Entry%20Functions/entry-management/#returns_3","title":"Returns","text":"<p><code>CustomField</code> - Custom field with generated ID</p>"},{"location":"Entry%20Functions/entry-management/#example_3","title":"Example","text":"<pre><code>import { createCustomField, FieldType } from \"safekeys-core\";\n\nconst apiKeyField = createCustomField(\n  \"API Key\",\n  \"sk-1234567890abcdef\",\n  FieldType.PASSWORD,\n  true // hidden\n);\n\nconsole.log(apiKeyField);\n// {\n//   id: \"field_1234567890\",\n//   name: \"API Key\",\n//   value: \"sk-1234567890abcdef\",\n//   type: \"password\",\n//   hidden: true\n// }\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#updatecustomfield","title":"updateCustomField()","text":"<p>Updates a custom field in an entry.</p>"},{"location":"Entry%20Functions/entry-management/#signature_4","title":"Signature","text":"<pre><code>function updateCustomField(\n  entry: VaultEntry,\n  fieldId: string,\n  updates: Partial&lt;Omit&lt;CustomField, \"id\"&gt;&gt;\n): VaultEntry;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_4","title":"Parameters","text":"Parameter Type Description <code>entry</code> <code>VaultEntry</code> Entry containing the custom field <code>fieldId</code> <code>string</code> ID of the custom field to update <code>updates</code> <code>Partial&lt;Omit&lt;CustomField, \"id\"&gt;&gt;</code> Updates to apply to the custom field"},{"location":"Entry%20Functions/entry-management/#returns_4","title":"Returns","text":"<p><code>VaultEntry</code> - Updated entry with modified custom field</p>"},{"location":"Entry%20Functions/entry-management/#example_4","title":"Example","text":"<pre><code>import { updateCustomField } from \"safekeys-core\";\n\nconst entryWithFields = {\n  /* ... entry with custom fields ... */\n};\n\nconst updatedEntry = updateCustomField(entryWithFields, \"field_123\", {\n  value: \"new-api-key-value\",\n  hidden: false,\n});\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#addcustomfield","title":"addCustomField()","text":"<p>Adds a custom field to a vault entry.</p>"},{"location":"Entry%20Functions/entry-management/#signature_5","title":"Signature","text":"<pre><code>function addCustomField(entry: VaultEntry, field: CustomField): VaultEntry;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_5","title":"Parameters","text":"Parameter Type Description <code>entry</code> <code>VaultEntry</code> The entry to add the field to <code>field</code> <code>CustomField</code> The custom field to add"},{"location":"Entry%20Functions/entry-management/#returns_5","title":"Returns","text":"<p><code>VaultEntry</code> - Entry with the custom field added</p>"},{"location":"Entry%20Functions/entry-management/#example_5","title":"Example","text":"<pre><code>import { addCustomField, createCustomField, FieldType } from \"safekeys-core\";\n\nconst entry = createEntry({ title: \"API Service\" });\nconst customField = createCustomField(\"API Key\", \"abc123\", FieldType.PASSWORD);\n\nconst entryWithField = addCustomField(entry, customField);\n\nconsole.log(entryWithField.customFields?.length); // 1\nconsole.log(entryWithField.customFields?.[0].name); // \"API Key\"\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#removecustomfield","title":"removeCustomField()","text":"<p>Removes a custom field from a vault entry.</p>"},{"location":"Entry%20Functions/entry-management/#signature_6","title":"Signature","text":"<pre><code>function removeCustomField(entry: VaultEntry, fieldId: string): VaultEntry;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_6","title":"Parameters","text":"Parameter Type Description <code>entry</code> <code>VaultEntry</code> The entry to remove the field from <code>fieldId</code> <code>string</code> ID of the custom field to remove"},{"location":"Entry%20Functions/entry-management/#returns_6","title":"Returns","text":"<p><code>VaultEntry</code> - Entry with the custom field removed</p>"},{"location":"Entry%20Functions/entry-management/#example_6","title":"Example","text":"<pre><code>import { removeCustomField } from \"safekeys-core\";\n\nconst entryWithFields = {\n  /* ... entry with custom fields ... */\n};\nconst fieldIdToRemove = \"field_1234567890\";\n\nconst entryWithoutField = removeCustomField(entryWithFields, fieldIdToRemove);\n\nconsole.log(\"Fields remaining:\", entryWithoutField.customFields?.length);\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#validatecreateentrydata","title":"validateCreateEntryData()","text":"<p>Validates data for creating a new vault entry.</p>"},{"location":"Entry%20Functions/entry-management/#signature_7","title":"Signature","text":"<pre><code>function validateCreateEntryData(data: CreateVaultEntryData): ValidationResult;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_7","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>CreateVaultEntryData</code> Entry creation data to validate"},{"location":"Entry%20Functions/entry-management/#returns_7","title":"Returns","text":"<p><code>ValidationResult</code> - Validation result with errors and warnings</p>"},{"location":"Entry%20Functions/entry-management/#example_7","title":"Example","text":"<pre><code>import { validateCreateEntryData } from \"safekeys-core\";\n\nconst entryData = {\n  title: \"New Entry\",\n  username: \"user@example.com\",\n  password: \"password123\",\n};\n\nconst result = validateCreateEntryData(entryData);\n\nif (result.isValid) {\n  const entry = createEntry(entryData);\n} else {\n  console.log(\"Validation failed:\", result.errors);\n}\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#validatecustomfielddata","title":"validateCustomFieldData()","text":"<p>Validates data for creating a custom field.</p>"},{"location":"Entry%20Functions/entry-management/#signature_8","title":"Signature","text":"<pre><code>function validateCustomFieldData(data: Partial&lt;CustomField&gt;): ValidationResult;\n</code></pre>"},{"location":"Entry%20Functions/entry-management/#parameters_8","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>Partial&lt;CustomField&gt;</code> Custom field data to validate"},{"location":"Entry%20Functions/entry-management/#returns_8","title":"Returns","text":"<p><code>ValidationResult</code> - Validation result with errors and warnings</p>"},{"location":"Entry%20Functions/entry-management/#example_8","title":"Example","text":"<pre><code>import { validateCustomFieldData, FieldType } from \"safekeys-core\";\n\nconst fieldData = {\n  name: \"Secret Key\",\n  value: \"abc123\",\n  type: FieldType.PASSWORD,\n};\n\nconst result = validateCustomFieldData(fieldData);\n\nif (result.isValid) {\n  const field = createCustomField(\n    fieldData.name,\n    fieldData.value,\n    fieldData.type\n  );\n}\n</code></pre>"},{"location":"Types/types/","title":"TypeScript Types","text":"<p>Complete reference for all TypeScript interfaces and enums used in SafeKeys-Core.</p>"},{"location":"Types/types/#core-interfaces","title":"Core Interfaces","text":""},{"location":"Types/types/#vaultentry","title":"VaultEntry","text":"<p>Complete vault entry with all fields and metadata.</p> <pre><code>interface VaultEntry {\n  id: string; // Unique identifier\n  title: string; // Entry title\n  username?: string; // Username/email\n  password?: string; // Password\n  url?: string; // Website URL\n  notes?: string; // Additional notes\n  tags?: string[]; // Array of tags\n  createdAt: Date; // Creation date\n  updatedAt: Date; // Last update date\n  favorite?: boolean; // Whether entry is marked as favorite\n  category?: EntryCategory; // Entry category\n  customFields?: CustomField[]; // Array of custom fields\n}\n</code></pre>"},{"location":"Types/types/#example","title":"Example","text":"<pre><code>const entry: VaultEntry = {\n  id: \"entry_1234567890\",\n  title: \"GitHub Account\",\n  username: \"myusername\",\n  password: \"secure-password-123\",\n  url: \"https://github.com\",\n  notes: \"My main GitHub account\",\n  tags: [\"development\", \"work\"],\n  favorite: true,\n  category: EntryCategory.LOGIN,\n  customFields: [],\n  createdAt: new Date(\"2024-01-15T10:30:00.000Z\"),\n  updatedAt: new Date(\"2024-01-15T10:30:00.000Z\"),\n};\n</code></pre>"},{"location":"Types/types/#customfield","title":"CustomField","text":"<p>Custom field for additional entry data.</p> <pre><code>interface CustomField {\n  id: string; // Unique identifier\n  name: string; // Field name\n  value: string; // Field value\n  type: FieldType; // Field type\n  hidden?: boolean; // Whether field is hidden (default: false)\n}\n</code></pre>"},{"location":"Types/types/#example_1","title":"Example","text":"<pre><code>const customField: CustomField = {\n  id: \"field_1234567890\",\n  name: \"API Key\",\n  value: \"sk-1234567890abcdef\",\n  type: FieldType.PASSWORD,\n  hidden: true,\n};\n</code></pre>"},{"location":"Types/types/#vault","title":"Vault","text":"<p>Container for organizing vault entries.</p> <pre><code>interface Vault {\n  id: string; // Unique identifier\n  name: string; // Vault name\n  description?: string; // Vault description\n  entries: VaultEntry[]; // Array of entries\n  createdAt: Date; // Creation date\n  updatedAt: Date; // Last update date\n  version: string; // Vault format version\n  settings?: VaultSettings; // Vault settings\n}\n</code></pre>"},{"location":"Types/types/#example_2","title":"Example","text":"<pre><code>const vault: Vault = {\n  id: \"vault_1234567890\",\n  name: \"Personal Vault\",\n  description: \"My personal passwords and accounts\",\n  entries: [],\n  createdAt: new Date(\"2024-01-15T10:00:00.000Z\"),\n  updatedAt: new Date(\"2024-01-15T10:30:00.000Z\"),\n  version: \"1.0.0\",\n};\n</code></pre>"},{"location":"Types/types/#utility-types","title":"Utility Types","text":""},{"location":"Types/types/#createvaultentrydata","title":"CreateVaultEntryData","text":"<p>Data required to create a new vault entry (without ID and timestamps).</p> <pre><code>type CreateVaultEntryData = Omit&lt;VaultEntry, \"id\" | \"createdAt\" | \"updatedAt\"&gt;;\n</code></pre>"},{"location":"Types/types/#example_3","title":"Example","text":"<pre><code>const entryData: CreateVaultEntryData = {\n  title: \"New Account\",\n  username: \"user@example.com\",\n  password: \"secure-password\",\n  url: \"https://example.com\",\n  category: EntryCategory.LOGIN,\n  tags: [\"personal\"],\n  favorite: false,\n};\n</code></pre>"},{"location":"Types/types/#updatevaultentrydata","title":"UpdateVaultEntryData","text":"<p>Partial data for updating an existing vault entry.</p> <pre><code>type UpdateVaultEntryData = Partial&lt;Omit&lt;VaultEntry, \"id\" | \"createdAt\"&gt;&gt;;\n</code></pre>"},{"location":"Types/types/#example_4","title":"Example","text":"<pre><code>const updates: UpdateVaultEntryData = {\n  password: \"new-secure-password\",\n  notes: \"Updated password on 2024-01-15\",\n  updatedAt: new Date(),\n};\n</code></pre>"},{"location":"Types/types/#validationresult","title":"ValidationResult","text":"<p>Result object returned by validation functions.</p> <pre><code>interface ValidationResult {\n  isValid: boolean; // Whether validation passed\n  errors: ValidationError[]; // Array of validation errors\n  warnings: ValidationWarning[]; // Array of validation warnings\n}\n\ninterface ValidationError {\n  field: string; // Field that failed validation\n  message: string; // Error message\n  code: string; // Error code\n}\n\ninterface ValidationWarning {\n  field: string; // Field with warning\n  message: string; // Warning message\n  code: string; // Warning code\n}\n</code></pre>"},{"location":"Types/types/#example_5","title":"Example","text":"<pre><code>const result: ValidationResult = {\n  isValid: false,\n  errors: [\n    {\n      field: \"title\",\n      message: \"Title is required\",\n      code: \"REQUIRED_FIELD\",\n    },\n  ],\n  warnings: [],\n};\n</code></pre>"},{"location":"Types/types/#enums","title":"Enums","text":""},{"location":"Types/types/#entrycategory","title":"EntryCategory","text":"<p>Categories for organizing vault entries.</p> <pre><code>enum EntryCategory {\n  LOGIN = \"login\", // Login credentials\n  SECURE_NOTE = \"secure_note\", // Secure notes\n  CREDIT_CARD = \"credit_card\", // Credit card information\n  IDENTITY = \"identity\", // Identity information\n  SOFTWARE_LICENSE = \"software_license\", // Software licenses\n  BANK_ACCOUNT = \"bank_account\", // Bank account details\n  OTHER = \"other\", // Other/miscellaneous\n}\n</code></pre>"},{"location":"Types/types/#example_6","title":"Example","text":"<pre><code>import { EntryCategory } from \"safekeys-core\";\n\nconst entry = createEntry({\n  title: \"My Bank\",\n  category: EntryCategory.BANK_ACCOUNT,\n});\n</code></pre>"},{"location":"Types/types/#fieldtype","title":"FieldType","text":"<p>Types for custom fields.</p> <pre><code>enum FieldType {\n  TEXT = \"text\", // Plain text\n  PASSWORD = \"password\", // Password (hidden by default)\n  EMAIL = \"email\", // Email address\n  URL = \"url\", // Website URL\n  NUMBER = \"number\", // Numeric value\n  DATE = \"date\", // Date\n  TEXTAREA = \"textarea\", // Multi-line text\n}\n</code></pre>"},{"location":"Types/types/#example_7","title":"Example","text":"<pre><code>import { FieldType } from \"safekeys-core\";\n\nconst customField = createCustomField(\n  \"Recovery Email\",\n  \"recovery@example.com\",\n  FieldType.EMAIL\n);\n</code></pre>"},{"location":"Validation%20Functions/validation/","title":"Validation Functions","text":"<p>Functions for validating data and schemas in SafeKeys-Core.</p>"},{"location":"Validation%20Functions/validation/#validatecreateentrydata","title":"validateCreateEntryData()","text":"<p>Validates data before creating a new vault entry.</p>"},{"location":"Validation%20Functions/validation/#signature","title":"Signature","text":"<pre><code>function validateCreateEntryData(data: CreateVaultEntryData): ValidationResult;\n</code></pre>"},{"location":"Validation%20Functions/validation/#parameters","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>CreateVaultEntryData</code> The data object to validate"},{"location":"Validation%20Functions/validation/#returns","title":"Returns","text":"<p><code>ValidationResult</code> - Validation result with errors and warnings</p>"},{"location":"Validation%20Functions/validation/#example","title":"Example","text":"<pre><code>import { validateCreateEntryData, EntryCategory } from \"safekeys-core\";\n\nconst entryData = {\n  title: \"GitHub\",\n  username: \"myuser\",\n  password: \"secret123\",\n  url: \"https://github.com\",\n  category: EntryCategory.LOGIN,\n};\n\nconst result = validateCreateEntryData(entryData);\n\nif (result.isValid) {\n  console.log(\"Data is valid\");\n  // Proceed with createEntry(entryData)\n} else {\n  console.log(\"Validation errors:\", result.errors);\n  console.log(\"Validation warnings:\", result.warnings);\n}\n</code></pre>"},{"location":"Validation%20Functions/validation/#validation-rules","title":"Validation Rules","text":"<ul> <li><code>title</code> - Required, string, non-empty</li> <li><code>username</code> - Optional, string</li> <li><code>password</code> - Optional, string</li> <li><code>url</code> - Optional, valid URL format</li> <li><code>category</code> - Optional, valid EntryCategory enum value</li> <li><code>tags</code> - Optional, array of strings</li> <li><code>notes</code> - Optional, string</li> </ul>"},{"location":"Validation%20Functions/validation/#validatecustomfielddata","title":"validateCustomFieldData()","text":"<p>Validates custom field data before creation.</p>"},{"location":"Validation%20Functions/validation/#signature_1","title":"Signature","text":"<pre><code>function validateCustomFieldData(data: Partial&lt;CustomField&gt;): ValidationResult;\n</code></pre>"},{"location":"Validation%20Functions/validation/#parameters_1","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>Partial&lt;CustomField&gt;</code> The custom field data to validate"},{"location":"Validation%20Functions/validation/#returns_1","title":"Returns","text":"<p><code>ValidationResult</code> - Validation result with errors and warnings</p>"},{"location":"Validation%20Functions/validation/#example_1","title":"Example","text":"<pre><code>import { validateCustomFieldData, FieldType } from \"safekeys-core\";\n\nconst fieldData = {\n  name: \"API Key\",\n  value: \"sk-1234567890\",\n  type: FieldType.PASSWORD,\n  hidden: true,\n};\n\nconst result = validateCustomFieldData(fieldData);\n\nif (result.isValid) {\n  console.log(\"Field data is valid\");\n} else {\n  console.log(\"Validation errors:\", result.errors);\n}\n</code></pre>"},{"location":"Validation%20Functions/validation/#validation-rules_1","title":"Validation Rules","text":"<ul> <li><code>name</code> - Required, string, non-empty</li> <li><code>value</code> - Required, string</li> <li><code>type</code> - Required, valid FieldType enum value</li> <li><code>hidden</code> - Optional, boolean</li> </ul>"},{"location":"Validation%20Functions/validation/#validateentry","title":"validateEntry()","text":"<p>Validates a complete vault entry.</p>"},{"location":"Validation%20Functions/validation/#signature_2","title":"Signature","text":"<pre><code>function validateEntry(entry: VaultEntry): ValidationResult;\n</code></pre>"},{"location":"Validation%20Functions/validation/#parameters_2","title":"Parameters","text":"Parameter Type Description <code>entry</code> <code>VaultEntry</code> The entry object to validate"},{"location":"Validation%20Functions/validation/#returns_2","title":"Returns","text":"<p><code>ValidationResult</code> - Validation result with errors and warnings</p>"},{"location":"Validation%20Functions/validation/#example_2","title":"Example","text":"<pre><code>import { validateEntry } from \"safekeys-core\";\n\nconst entry = {\n  id: \"entry_123\",\n  title: \"Test Entry\",\n  username: \"user@example.com\",\n  password: \"password123\",\n  createdAt: new Date(),\n  updatedAt: new Date(),\n};\n\nconst result = validateEntry(entry);\n\nif (result.isValid) {\n  console.log(\"Entry is valid\");\n} else {\n  console.log(\"Validation errors:\", result.errors);\n}\n</code></pre>"},{"location":"Validation%20Functions/validation/#validationresult-interface","title":"ValidationResult Interface","text":"<p>The result object returned by validation functions.</p>"},{"location":"Validation%20Functions/validation/#type-definition","title":"Type Definition","text":"<pre><code>interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n}\n\ninterface ValidationError {\n  field: string;\n  message: string;\n  code: string;\n}\n\ninterface ValidationWarning {\n  field: string;\n  message: string;\n  code: string;\n}\n</code></pre>"},{"location":"Validation%20Functions/validation/#properties","title":"Properties","text":"Property Type Description <code>isValid</code> <code>boolean</code> Whether validation passed <code>errors</code> <code>ValidationError[]</code> Array of validation errors <code>warnings</code> <code>ValidationWarning[]</code> Array of validation warnings"},{"location":"Validation%20Functions/validation/#example-usage","title":"Example Usage","text":"<pre><code>import { validateCreateEntryData } from \"safekeys-core\";\n\nfunction handleEntryCreation(rawData: any) {\n  const validation = validateCreateEntryData(rawData);\n\n  if (validation.isValid) {\n    const entry = createEntry(rawData);\n    return { success: true, entry };\n  } else {\n    return {\n      success: false,\n      errors: validation.errors,\n      warnings: validation.warnings,\n    };\n  }\n}\n</code></pre>"},{"location":"Validation%20Functions/validation/#schema-validation","title":"Schema Validation","text":"<p>SafeKeys-Core uses comprehensive schema validation to ensure data integrity.</p>"},{"location":"Validation%20Functions/validation/#entry-schema","title":"Entry Schema","text":"<pre><code>// Data for creating new entries\ntype CreateVaultEntryData = Omit&lt;VaultEntry, \"id\" | \"createdAt\" | \"updatedAt\"&gt;;\n\n// Complete entry after creation\ninterface VaultEntry {\n  id: string; // auto-generated\n  title: string; // required\n  username?: string; // optional\n  password?: string; // optional\n  url?: string; // optional\n  notes?: string; // optional\n  tags?: string[]; // optional\n  createdAt: Date; // auto-generated\n  updatedAt: Date; // auto-generated\n  favorite?: boolean; // optional\n  category?: EntryCategory; // optional\n  customFields?: CustomField[]; // optional\n}\n</code></pre>"},{"location":"Validation%20Functions/validation/#custom-field-schema","title":"Custom Field Schema","text":"<pre><code>interface CustomField {\n  id: string; // auto-generated\n  name: string; // required\n  value: string; // required\n  type: FieldType; // required\n  hidden?: boolean; // optional, default: false\n}\n</code></pre>"},{"location":"Validation%20Functions/validation/#error-handling","title":"Error Handling","text":"<p>Validation functions provide detailed error messages for debugging.</p>"},{"location":"Validation%20Functions/validation/#common-error-codes","title":"Common Error Codes","text":"<pre><code>// Title validation\n\"REQUIRED_FIELD\"; // Field is required\n\"INVALID_TYPE\"; // Field has wrong type\n\"INVALID_FORMAT\"; // Field format is invalid\n\n// URL validation\n\"INVALID_URL\"; // URL format is invalid\n\n// Category validation\n\"INVALID_ENUM_VALUE\"; // Invalid enum value\n\n// Custom field validation\n\"FIELD_TOO_LONG\"; // Field value too long\n\"FIELD_EMPTY\"; // Required field is empty\n</code></pre>"},{"location":"Validation%20Functions/validation/#example-error-handling","title":"Example Error Handling","text":"<pre><code>import { validateCreateEntryData } from \"safekeys-core\";\n\nconst invalidData = {\n  title: \"\", // Empty title\n  url: \"not-a-url\", // Invalid URL\n  category: \"invalid\", // Invalid category\n};\n\nconst result = validateCreateEntryData(invalidData);\n\nif (!result.isValid) {\n  result.errors.forEach((error) =&gt; {\n    console.error(`${error.field}: ${error.message} (${error.code})`);\n  });\n\n  // Output:\n  // title: Title is required (REQUIRED_FIELD)\n  // url: URL must be a valid URL format (INVALID_URL)\n  // category: Invalid category value (INVALID_ENUM_VALUE)\n}\n</code></pre>"}]}